plugins {
  id 'application'
  id 'com.github.ben-manes.versions'
}

group = 'com.nilhcem.fakesmtp'

def isNonStable = {
  String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any {
      it -> version.toUpperCase().contains(it)
    }
    def regex = /^[0-9,.v-]+(-jre)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named('dependencyUpdates').configure {
  checkForGradleUpdate = true
  rejectVersionIf {
    isNonStable(it.candidate.version)
  }
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs += '-parameters'
}

tasks.named('test', Test).configure {
  useJUnitPlatform()
}

dependencies {
  implementation "com.miglayout:miglayout-swing:$miglayoutSwingVersion"
  implementation "org.subethamail:subethasmtp:$subethasmtpVersion"
  implementation "org.slf4j:slf4j-api:$slf4jVersion"
  implementation "ch.qos.logback:logback-classic:$logbackVersion"
  implementation "commons-io:commons-io:$commonsIoVersion"
  implementation "commons-cli:commons-cli:$commmonsCliVersion"
  implementation "com.apple:AppleJavaExtensions:$appleJavaExtensionsVersion"
  implementation "com.formdev:flatlaf:$flatlafVersion"
  implementation "org.jetbrains:annotations:$annotationsVersion"

  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
  testImplementation "org.assertj:assertj-core:$assertjVersion"
  testImplementation "org.apache.commons:commons-email:$commonsEmail"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

application {
  mainClass.set('com.nilhcem.fakesmtp.FakeSMTP')
}
